You've set up a machine learning pipeline and it's delivering predictions and estimates in real time just as you hoped it would! Now, what can you do with those numbers? Intuitively, we think that if we compute a prediction that an event A is more likely than another event B, we should probably take an A-related action instead of a B-related action. But not if the A-action is really expensive compared to the B-action; then we'd hesitate unless we're very sure about A. We could set up some rules to post-process the predictions to figure out which action to take. That sounds kind of hackish.

But wait! The good news is that we can formalize the decision problem in terms of statements of beliefs (i.e., probabilities) and values or preferences (i.e., utilities). Typical machine learning algorithms can produce probabilities, which we'll take as the inputs for the decision-making step. Given fairly broad assumptions, the right way to make a decision is to take the action which maximizes expected (i.e., weighted average) utility. This gives a straightforward recipe for deriving actions from beliefs and preferences. Typically the expected utility calculation is much simpler than the belief calculation, so we can easily a devise a decison-making back end for our machine learning pipeline.

In this talk, I'll pose some real-world decision problems and then talk about the features they have in common. I'll describe a framework for finding best actions for such problems in general, and show how the framework applies to the problems I posed at the beginning of the talk. I'll emphasize the idea that a formal decision making analysis gives an obvious way to inject business logic into the pipeline in a clear and easily-modified way.
